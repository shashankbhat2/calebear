// Prisma schema file. Docs: https://pris.ly/d/prisma-schema
//
// For faster queries or serverless scaling, try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum IntegrationType {
  CALENDAR
  CONFERENCING
  PAYMENT
}

enum Role {
  USER
  ADMIN
  SUPER_ADMIN
}

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  password  String?  // Optional: for OAuth or separate email verification
  firstName String?
  lastName  String?
  picture   String?  // Profile picture URL
  googleId  String?  @unique // Google user ID

  integrations Integration[] // Relation to Integrations
  onboarding   UserOnboarding? // Relation to UserOnboarding

  chosenPersonaId String?
  chosenPersona   UserPersona?    @relation(fields: [chosenPersonaId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  role Role @default(USER)
  destinationCalendars DestinationCalendar[] // Relation to DestinationCalendar
  @@map("users") // Table name in DB
}


model IntegrationProvider {
  id            String          @id @default(cuid())
  providerKey   String          @unique // e.g. "google_calendar", "zoom_conferencing"
  displayName   String          // e.g. "Google Calendar", "Zoom"
  description   String?
  logoUrl       String?
  type          IntegrationType // CALENDAR, CONFERENCING
  isEnabled     Boolean         @default(true)
  isBeta        Boolean         @default(false) // Mark as beta/preview

  integrations  Integration[]   // Integration instances using this provider

  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt

  @@map("integration_providers")
}


model Integration {
  id            String          @id @default(cuid())
  userId        String
  name          String?         
  accessToken   String          @db.Text
  refreshToken  String?         @db.Text
  lastSync      DateTime?
  externalId    String?        
  integrationProviderId String
  integrationProvider   IntegrationProvider @relation(fields: [integrationProviderId], references: [id])

  user          User            @relation(fields: [userId], references: [id], onDelete: Cascade)
  metadata      Json?           
  destinationCalendars DestinationCalendar[] // Relation to DestinationCalendar
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt

  @@map("integrations")
  @@index([userId])
  @@index([integrationProviderId])
  @@unique([userId, integrationProviderId, externalId], name: "user_provider_external_id_key") // User can link a specific external resource once per provider
}


model UserPersona {
  id                      String            @id @default(cuid())
  name                    String            @unique
  description             String?
  defaultIntegrationTypes IntegrationType[] // Default integrations for this persona
  users                   User[]            // Users with this persona
  onboardingsWithThisInitialPersona UserOnboarding[] @relation("InitialPersonaForOnboarding") // Onboardings started with this persona
  createdAt               DateTime          @default(now())
  updatedAt               DateTime          @updatedAt

  @@map("user_personas")
}

model UserOnboarding {
  id           String    @id @default(cuid())
  userId       String    @unique // 1:1 with User
  user         User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  onboardingId String // Onboarding flow ID

  initialPersonaId String?    @map("initial_persona_id")
  initialPersona   UserPersona? @relation("InitialPersonaForOnboarding", fields: [initialPersonaId], references: [id], onDelete: SetNull)

  completed    Boolean   @default(false)
  currentStep  String?
  onboardingData Json?      // Onboarding-specific data

  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt

  @@map("user_onboardings")
  @@index([initialPersonaId])
}

model DestinationCalendar {
  id            String      @id @default(cuid())
  userId        String
  integrationId String
  externalId    String      // External ID of the calendar (e.g., Google Calendar ID)
  name          String      // User-friendly name for the calendar
  isPrimary     Boolean     @default(false)
  isReadOnly    Boolean     @default(false) // Whether the calendar is read-only

  user          User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  integration   Integration @relation(fields: [integrationId], references: [id], onDelete: Cascade)

  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt

  @@map("destination_calendars")
  @@index([userId])
  @@index([integrationId])
  @@unique([userId, integrationId, externalId], name: "user_integration_external_id_key")
}